const SoftUIData = [
  {
    id: 1,
    identifier: "LED",
    title: "LED Light",
    code: '"use client";\r\nimport React, { useEffect, useState } from "react";\r\nimport clsx from "clsx";\r\n\r\ntype LEDLightProps = {\r\n  size?: number;\r\n  color?: string;\r\n  className?: string;\r\n  enabled?: boolean;\r\n};\r\n\r\nconst LEDLight: React.FC<LEDLightProps> = ({\r\n  size = 100,\r\n  color = "red",\r\n  className = "",\r\n  enabled = true,\r\n}) => {\r\n  const [ledColor, setLedColor] = useState("inherit");\r\n  const [shadowColor, setShadowColor] = useState("inherit");\r\n\r\n  useEffect(() => {\r\n    if (enabled) {\r\n      setLedColor(color);\r\n      setShadowColor(`${color}, ${color}66`); \r\n    } else {\r\n      setLedColor("inherit");\r\n      setShadowColor("inherit, inherit"); \r\n    }\r\n  }, [color, enabled]);\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "relative flex items-center justify-center rounded-full bg-gray-200",\r\n        "shadow-[inset_3px_3px_6px_rgba(0,0,0,0.2),inset_-3px_-3px_6px_rgba(255,255,255,0.6)]",\r\n        className\r\n      )}\r\n      style={{ width: size, height: size }}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          "absolute rounded-full",\r\n          "shadow-[0px_0px_10px_rgba(0,0,0,0.2)] transition-all duration-300"\r\n        )}\r\n        style={{\r\n          width: size / 1.55,\r\n          height: size / 1.55,\r\n          backgroundColor: ledColor,\r\n          boxShadow: `0 0 10px ${shadowColor}, 0 0 20px ${shadowColor}`,\r\n          filter: "blur(0.8px)",\r\n          transition: "background-color 0.5s ease, box-shadow 0.5s ease",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LEDLight;\r\n',
    usage:
      '"use client";\r\nimport LEDLight from "@/components/LEDLight";\r\nimport Switch from "@/components/Switch";\r\nimport { useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\n\r\nexport default function LEDDemo() {\r\n  const [ledEnabled, setLedEnabled] = useState(true);\r\n\r\n  return (\r\n    <FeatureContainer title="LED Lights" id="LED">\r\n      <div className="flex gap-4 items-center">\r\n        <div className="flex items-center gap-4">\r\n          <LEDLight color="#ef4444" size={20} enabled={ledEnabled} />\r\n          <LEDLight color="#fcd34d" size={20} enabled={ledEnabled} />\r\n          <LEDLight color="#4ade80" size={20} enabled={ledEnabled} />\r\n        </div>\r\n        <div>\r\n          <Switch\r\n            size="large"\r\n            enabled={ledEnabled}\r\n            onToggle={() => setLedEnabled(!ledEnabled)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 2,
    identifier: "Switch",
    title: "Switch Button",
    code: '"use client";\r\nimport React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype SwitchProps = {\r\n  enabled: boolean;\r\n  onToggle: (param: boolean) => void;\r\n  size?: "small" | "medium" | "large";\r\n  className?: string;\r\n};\r\n\r\nconst Switch: React.FC<SwitchProps> = ({\r\n  enabled,\r\n  onToggle,\r\n  size = "medium",\r\n  className,\r\n}) => {\r\n    \r\n  const sizeStyles = {\r\n    small: {\r\n      switch: "w-10 h-5 rounded-lg",\r\n      circle: "w-3 h-3 rounded-md",\r\n      translate: "translate-x-6",\r\n      text: "text-xs",\r\n    },\r\n    medium: {\r\n      switch: "w-14 h-7 rounded-xl",\r\n      circle: "w-5 h-5 rounded-lg",\r\n      translate: "translate-x-8",\r\n      text: "text-sm",\r\n    },\r\n    large: {\r\n      switch: "w-20 h-10 rounded-2xl",\r\n      circle: "w-8 h-8 rounded-xl",\r\n      translate: "translate-x-11",\r\n      text: "text-base",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "relative inline-flex items-center cursor-pointer transition-all duration-300",\r\n        className\r\n      )}\r\n      onClick={() => onToggle(!enabled)}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          "flex items-center justify-between px-1 bg-gradient-to-r from-background-card to-background-card-secondary border border-muted/20 shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.4)]",\r\n          sizeStyles[size].switch\r\n        )}\r\n      >\r\n        <span\r\n          className={clsx(\r\n            sizeStyles[size].text,\r\n            "text-muted font-semibold transition-opacity duration-300 text-sm mx-2",\r\n            enabled ? "opacity-100" : "opacity-0",\r\n            size !== "large" && "hidden"\r\n          )}\r\n        >\r\n          on\r\n        </span>\r\n        <span\r\n          className={clsx(\r\n            sizeStyles[size].text,\r\n            "text-muted font-semibold transition-opacity duration-300 text-sm mx-2",\r\n            !enabled ? "opacity-100" : "opacity-0",\r\n            size !== "large" && "hidden"\r\n          )}\r\n        >\r\n          off\r\n        </span>\r\n      </div>\r\n      <div\r\n        className={clsx(\r\n          "flex items-center justify-center absolute top-1 bg-white shadow-md transition-transform duration-300",\r\n          sizeStyles[size].circle,\r\n          enabled ? sizeStyles[size].translate : "translate-x-1"\r\n        )}\r\n      >\r\n        <div className="h-[50%] rounded-full w-[3px] bg-background-card shadow-sm"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n',
    usage:
      '"use client";\r\nimport Switch from "@/components/Switch";\r\nimport { useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\n\r\nexport default function SwitchDemo() {\r\n  const [switchAEnabled, setSwitchAEnabled] = useState(true);\r\n  const [switchBEnabled, setSwitchBEnabled] = useState(true);\r\n  const [switchCEnabled, setSwitchCEnabled] = useState(true);\r\n\r\n  return (\r\n    <FeatureContainer title="Switch Buttons" id="Switch">\r\n      <div>\r\n        <div className="flex items-center gap-4">\r\n          <Switch\r\n            enabled={switchAEnabled}\r\n            onToggle={(val) => setSwitchAEnabled(val)}\r\n            size="large"\r\n          />\r\n          <Switch\r\n            enabled={switchBEnabled}\r\n            onToggle={(val) => setSwitchBEnabled(val)}\r\n            size="medium"\r\n          />\r\n          <Switch\r\n            enabled={switchCEnabled}\r\n            onToggle={(val) => setSwitchCEnabled(val)}\r\n            size="small"\r\n          />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 3,
    identifier: "LCD",
    title: "LCD Display",
    code: 'import { lcdFont } from "@/lib/fonts";\r\nimport Card from "./Card";\r\nimport clsx from "clsx";\r\nimport { ReactNode } from "react";\r\n\r\ntype Elevation = "none" | "outside" | "inside" | "mix";\r\n\r\ntype LCDScreenProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  elevation?: Elevation;\r\n  showGrid?: boolean;\r\n};\r\n\r\nexport default function LCDScreen({\r\n  children,\r\n  className,\r\n  elevation = "inside",\r\n  showGrid = false,\r\n}: LCDScreenProps) {\r\n  return (\r\n    <Card\r\n      variant="lcd"\r\n      className={clsx(\r\n        "relative text-4xl p-3 rounded-md text-center",\r\n        lcdFont.className,\r\n        className\r\n      )}\r\n      elevation={elevation}\r\n    >\r\n      {showGrid && (\r\n        <div\r\n          className="absolute w-full h-full inset-0"\r\n          style={{\r\n            backgroundImage: `\r\n          linear-gradient(to right, rgba(0,0,0,0.1) 1px, transparent 1px),\r\n          linear-gradient(to bottom, rgba(0,0,0,0.1) 1px, transparent 1px)\r\n        `,\r\n            backgroundSize: "10px 10px",\r\n            pointerEvents: "none",\r\n          }}\r\n        ></div>\r\n      )}\r\n      <div>{children}</div>\r\n    </Card>\r\n  );\r\n}\r\n',
    usage:
      '"use client";\r\nimport { useEffect, useRef, useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport LCDScreen from "@/components/LCDScreen";\r\n\r\nexport default function LCDScreenDemo() {\r\n  // CLOCK\r\n  const [hours, setHours] = useState<string>("00");\r\n  const [minutes, setMinutes] = useState<string>("00");\r\n  const [seconds, setSeconds] = useState<string>("00");\r\n\r\n  useEffect(() => {\r\n    const timerId = setInterval(() => {\r\n      const currentTime = new Date();\r\n\r\n      setHours(addLeadingZero(currentTime.getHours()));\r\n      setMinutes(addLeadingZero(currentTime.getMinutes()));\r\n      setSeconds(addLeadingZero(currentTime.getSeconds()));\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timerId);\r\n  }, []);\r\n\r\n  const addLeadingZero = (num: number) =>\r\n    num < 10 ? `0${num}` : num.toString();\r\n\r\n  // Temperature\r\n  const [temperature, setTemperature] = useState(20);\r\n\r\n  useEffect(() => {\r\n    const temperatureId = setInterval(() => {\r\n      setTemperature((prevTemperature) => {\r\n        const newTemperature = prevTemperature + 1;\r\n        if (newTemperature >= 25) {\r\n          return 16;\r\n        }\r\n        return newTemperature;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(temperatureId);\r\n  }, []);\r\n\r\n  // Wave\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext("2d");\r\n    if (!ctx) return;\r\n\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    const amplitude = 50; // Height of the wave\r\n    const frequency = 0.1; // Frequency of the wave\r\n\r\n    let offset = 0;\r\n\r\n    const drawWave = () => {\r\n      ctx.clearRect(0, 0, width, height); // Clear the canvas\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, height / 2);\r\n\r\n      for (let x = 0; x < width; x++) {\r\n        const y = amplitude * Math.sin(frequency * x + offset) + height / 2;\r\n        ctx.lineTo(x, y);\r\n      }\r\n\r\n      ctx.strokeStyle = "#555555";\r\n      ctx.lineWidth = 2;\r\n      ctx.stroke();\r\n    };\r\n\r\n    const animate = () => {\r\n      drawWave();\r\n      offset -= 0.05; // Adjust this value to control the speed of the wave\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate(); // Start the animation\r\n  }, []);\r\n\r\n  // Inline styles for the canvas to handle animation\r\n  const canvasStyle: React.CSSProperties = {\r\n    display: "block",\r\n    animation: "moveCanvas 10s linear infinite",\r\n    backgroundColor: "transparent",\r\n  };\r\n\r\n  return (\r\n    <FeatureContainer title="LCD Screens" id="LCD">\r\n      <div className="space-y-3">\r\n        <div className="flex gap-4 items-center flex-wrap">\r\n          {/* CLOCK */}\r\n          <LCDScreen className="min-w-[160px]">\r\n            {`${hours}:${minutes}:${seconds}`}\r\n          </LCDScreen>\r\n          {/* TEMPERATURE */}\r\n          <LCDScreen className="min-w-[160px]">{`${temperature}°C`}</LCDScreen>\r\n        </div>\r\n        {/* WAVE */}\r\n        <div>\r\n          <LCDScreen showGrid={true}>\r\n            <canvas\r\n              ref={canvasRef}\r\n              width={200}\r\n              height={120}\r\n              style={canvasStyle}\r\n            />\r\n          </LCDScreen>\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 4,
    identifier: "Slider",
    title: "Slider",
    code: 'import React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype SliderProps = {\r\n  value: number;\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  onChange: (value: number) => void;\r\n  size?: "small" | "medium" | "large";\r\n  className?: string;\r\n  progressColor?: string;\r\n};\r\n\r\nconst Slider: React.FC<SliderProps> = ({\r\n  value,\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  onChange,\r\n  size = "medium",\r\n  className,\r\n  progressColor = "red",\r\n}) => {\r\n  const sizeStyles = {\r\n    small: {\r\n      trackHeight: "h-2",\r\n      thumbSize: "w-10 h-8",\r\n      thumbOffset: 20,\r\n    },\r\n    medium: {\r\n      trackHeight: "h-3",\r\n      thumbSize: "w-12 h-10",\r\n      thumbOffset: 20,\r\n    },\r\n    large: {\r\n      trackHeight: "h-4",\r\n      thumbSize: "w-14 h-12",\r\n      thumbOffset: 24,\r\n    },\r\n  };\r\n\r\n  const percentage = ((value - min) / (max - min)) * 100;\r\n\r\n  const thumbOffset =\r\n    percentage === 0\r\n      ? 0\r\n      : percentage === 100\r\n      ? sizeStyles[size].thumbOffset * 2\r\n      : sizeStyles[size].thumbOffset;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "relative flex items-center bg-background-variant px-3 py-2 rounded-full",\r\n        "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n        className\r\n      )}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          "relative rounded-full bg-background-variant",\r\n          "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n          sizeStyles[size].trackHeight,\r\n          "w-full"\r\n        )}\r\n      >\r\n        <div\r\n          className={clsx("absolute top-0 left-0 rounded-full")}\r\n          style={{\r\n            background: progressColor,\r\n            height: "100%",\r\n            width: `${percentage}%`,\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div\r\n        className={clsx(\r\n          "absolute top-1/2 transform -translate-y-1/2 rounded-lg border border-white bg-background-variant flex items-center justify-center",\r\n          "shadow-[2px_2px_8px_rgba(0,0,0,0.1),-2px_-2px_8px_rgba(255,255,255,0.7)]",\r\n          sizeStyles[size].thumbSize\r\n        )}\r\n        style={{ left: `calc(${percentage}% - ${thumbOffset}px)` }} // Adjust thumb positioning\r\n      >\r\n        <div className="h-[50%] rounded-full w-[3px] bg-background-card shadow-sm"></div>\r\n      </div>\r\n\r\n      <input\r\n        type="range"\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n        value={value}\r\n        onChange={(e) => onChange(Number(e.target.value))}\r\n        className="absolute w-full h-full opacity-0 cursor-pointer"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n',
    usage:
      '"use client";\r\nimport { useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport Slider from "@/components/Slider";\r\n\r\nexport default function SliderDemo() {\r\n  const [value1, setValue1] = useState(20);\r\n  const [value2, setValue2] = useState(60);\r\n  const [value3, setValue3] = useState(15);\r\n\r\n  return (\r\n    <FeatureContainer title="Sliders" id="Slider">\r\n      <div className="mt-4 space-y-8">\r\n        <Slider\r\n          size="small"\r\n          progressColor="green"\r\n          value={value1}\r\n          onChange={(val) => setValue1(val)}\r\n        />\r\n        <Slider\r\n          size="medium"\r\n          progressColor="red"\r\n          value={value2}\r\n          onChange={(val) => setValue2(val)}\r\n        />\r\n        <Slider\r\n          size="large"\r\n          progressColor="blue"\r\n          value={value3}\r\n          onChange={(val) => setValue3(val)}\r\n        />\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 5,
    identifier: "Form",
    title: "FormFields",
    code: 'import React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype SizeTypes = "small" | "medium" | "large";\r\n\r\ninterface TextFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  fieldSize?: SizeTypes;\r\n  startIcon?: React.ReactNode;\r\n  endIcon?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst TextField: React.FC<TextFieldProps> = ({\r\n  fieldSize = "medium",\r\n  startIcon,\r\n  endIcon,\r\n  className = "",\r\n  ...inputProps\r\n}) => {\r\n  const sizeStyles: Record<SizeTypes, string> = {\r\n    small: "text-sm py-1 px-2",\r\n    medium: "text-base py-2 px-3",\r\n    large: "text-lg py-3 px-4",\r\n  };\r\n\r\n  const sizeClass = sizeStyles[fieldSize] || sizeStyles.medium;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "flex items-center rounded-lg bg-background-variant",\r\n        "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.1),inset_-2px_-2px_5px_rgba(255,255,255,0.7)]",\r\n        sizeClass,\r\n        className\r\n      )}\r\n    >\r\n      {startIcon && <div className="mr-2 text-muted">{startIcon}</div>}\r\n      <input\r\n        className={clsx(\r\n          "flex-1 bg-transparent outline-none",\r\n          startIcon && "pl-1",\r\n          endIcon && "pr-1"\r\n        )}\r\n        {...inputProps}\r\n      />\r\n      {endIcon && <div className="ml-2 text-muted">{endIcon}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n\nimport React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype SizeTypes = "small" | "medium" | "large";\r\n\r\ninterface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n  size?: SizeTypes;\r\n  startIcon?: React.ReactNode;\r\n  endIcon?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst TextArea: React.FC<TextAreaProps> = ({\r\n  size = "medium",\r\n  startIcon,\r\n  endIcon,\r\n  className = "",\r\n  ...textareaProps\r\n}) => {\r\n  const sizeStyles: Record<SizeTypes, string> = {\r\n    small: "text-sm py-1 px-2",\r\n    medium: "text-base py-2 px-3",\r\n    large: "text-lg py-3 px-4",\r\n  };\r\n\r\n  const sizeClass = sizeStyles[size] || sizeStyles.medium;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "flex items-center rounded-lg bg-background-variant",\r\n        "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.1),inset_-2px_-2px_5px_rgba(255,255,255,0.7)]",\r\n        className\r\n      )}\r\n    >\r\n      {startIcon && <div className="mr-2">{startIcon}</div>}\r\n      <textarea\r\n        className={clsx("resize-none flex-1 bg-transparent outline-none", sizeClass)}\r\n        {...textareaProps}\r\n      />\r\n      {endIcon && <div className="ml-2">{endIcon}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n\nimport React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype CheckboxProps = React.InputHTMLAttributes<HTMLInputElement> & {\r\n  label?: string;\r\n  size?: "small" | "medium" | "large";\r\n  className?: string;\r\n};\r\n\r\nconst Checkbox: React.FC<CheckboxProps> = ({\r\n  checked,\r\n  onChange,\r\n  label,\r\n  size = "medium",\r\n  className = "",\r\n  disabled = false,\r\n  ...rest\r\n}) => {\r\n  const sizeStyles: Record<string, string> = {\r\n    small: "w-4 h-4",\r\n    medium: "w-6 h-6",\r\n    large: "w-8 h-8",\r\n  };\r\n\r\n  const checkboxSize = sizeStyles[size] || sizeStyles.medium;\r\n\r\n  return (\r\n    <label\r\n      className={clsx(\r\n        "flex items-center cursor-pointer space-x-2",\r\n        className\r\n      )}\r\n    >\r\n      <div\r\n        className={clsx(\r\n          "relative flex items-center justify-center rounded-sm",\r\n          "bg-background-variant shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n          checkboxSize,\r\n          {\r\n            "bg-gray-300": disabled,\r\n            "bg-blue-500": checked && !disabled,\r\n          }\r\n        )}\r\n      >\r\n        <input\r\n          type="checkbox"\r\n          checked={checked}\r\n          onChange={(e) => onChange && onChange(e)}\r\n          disabled={disabled}\r\n          className="absolute opacity-0 cursor-pointer"\r\n          {...rest}\r\n        />\r\n        <div\r\n          className={clsx(\r\n            "absolute rounded-sm transition-colors duration-300",\r\n            checked ? "bg-blue-500" : "bg-gray-300",\r\n            checkboxSize\r\n          )}\r\n        >\r\n          {checked && !disabled && (\r\n            <svg\r\n              className="w-full h-full text-white"\r\n              viewBox="0 0 24 24"\r\n              fill="none"\r\n              xmlns="http://www.w3.org/2000/svg"\r\n            >\r\n              <path\r\n                d="M4 12l4 4 8-8"\r\n                stroke="currentColor"\r\n                strokeWidth="2"\r\n                strokeLinecap="round"\r\n                strokeLinejoin="round"\r\n              />\r\n            </svg>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {label && <span className={clsx("text-base", disabled && "text-gray-500")}>{label}</span>}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n\n"use client";\r\nimport React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype SizeTypes = "small" | "medium" | "large";\r\n\r\ntype SelectOption = {\r\n  value: string | number;\r\n  label: string;\r\n};\r\n\r\ntype SelectProps = React.SelectHTMLAttributes<HTMLSelectElement> & {\r\n  options: SelectOption[];\r\n  fieldSize?: SizeTypes;\r\n  className?: string;\r\n};\r\n\r\n// Explicitly typing the sizeStyles keys\r\nconst sizeStyles: Record<SizeTypes, string> = {\r\n  small: "px-2 py-1 text-sm",\r\n  medium: "px-3 py-2 text-base",\r\n  large: "px-4 py-3 text-lg",\r\n};\r\n\r\nconst Select: React.FC<SelectProps> = ({\r\n  options,\r\n  fieldSize = "medium",\r\n  disabled = false,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "relative inline-block rounded-full",\r\n        "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n        className\r\n      )}\r\n    >\r\n      <select\r\n        {...rest}\r\n        disabled={disabled}\r\n        className={clsx(\r\n          "appearance-none rounded-full focus:outline-none w-full",\r\n          sizeStyles[fieldSize], // Use the correct size styles\r\n          "bg-background-variant text-gray-700 cursor-pointer",\r\n          "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]", // Inner shadow\r\n          disabled ? "bg-gray-300 cursor-not-allowed text-gray-500" : ""\r\n        )}\r\n      >\r\n        {options.map((option) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Arrow Icon */}\r\n      <div\r\n        className={clsx(\r\n          "absolute top-1/2 right-3 transform -translate-y-1/2",\r\n          "text-gray-500",\r\n          "pointer-events-none"\r\n        )}\r\n      >\r\n        <svg\r\n          xmlns="http://www.w3.org/2000/svg"\r\n          className="w-4 h-4"\r\n          viewBox="0 0 24 24"\r\n          fill="none"\r\n          stroke="currentColor"\r\n          strokeWidth="2"\r\n          strokeLinecap="round"\r\n          strokeLinejoin="round"\r\n        >\r\n          <path d="M6 9l6 6 6-6" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n',
    usage:
      '"use client";\r\nimport { useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport TextField from "@/components/TextField";\r\nimport { BiLock, BiUser } from "react-icons/bi";\r\nimport TextArea from "@/components/TextArea";\r\nimport Checkbox from "@/components/CheckBox";\r\nimport DatePicker from "@/components/DatePicker";\r\nimport TimePicker from "@/components/TimePicker";\r\nimport Select from "@/components/Select";\r\n\r\nexport default function FormFieldsDemo() {\r\n  const [value1, setValue1] = useState("");\r\n  const [value2, setValue2] = useState("");\r\n  const [value3, setValue3] = useState("");\r\n\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const [selectedValue1, setSelectedValue1] = useState("option1");\r\n  const [selectedValue2, setSelectedValue2] = useState("option1");\r\n  const [selectedValue3, setSelectedValue3] = useState("option1");\r\n\r\n  const options = [\r\n    { value: "option1", label: "Option 1" },\r\n    { value: "option2", label: "Option 2" },\r\n    { value: "option3", label: "Option 3" },\r\n  ];\r\n\r\n  return (\r\n    <FeatureContainer title="Form Fields" id="Form">\r\n      <div className="space-y-4">\r\n        <TextField\r\n          startIcon={<BiUser />}\r\n          value={value1}\r\n          onChange={(e) => setValue1(e.target.value)}\r\n          placeholder="Username"\r\n        />\r\n        <TextField\r\n          startIcon={<BiLock />}\r\n          value={value2}\r\n          onChange={(e) => setValue2(e.target.value)}\r\n          placeholder="Password"\r\n          type="password"\r\n        />\r\n        <TextArea\r\n          value={value3}\r\n          onChange={(e) => setValue3(e.target.value)}\r\n          placeholder="Remarks"\r\n          rows={6}\r\n        />\r\n        <Checkbox\r\n          label="I agree with terms and conditions"\r\n          checked={checked}\r\n          onChange={(e) => setChecked(e.target.checked)}\r\n        />\r\n        <div>\r\n          <Select\r\n            value={selectedValue1}\r\n            onChange={(e) => setSelectedValue1(e.target.value)}\r\n            options={options}\r\n            fieldSize="small"\r\n            className="w-64"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Select\r\n            value={selectedValue2}\r\n            onChange={(e) => setSelectedValue2(e.target.value)}\r\n            options={options}\r\n            fieldSize="medium"\r\n            className="w-64"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Select\r\n            value={selectedValue3}\r\n            onChange={(e) => setSelectedValue3(e.target.value)}\r\n            options={options}\r\n            fieldSize="large"\r\n            className="w-64"\r\n          />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 6,
    identifier: "DateTime",
    title: "Date and Time Picker",
    code: 'import React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype DatePickerProps = {\r\n  value: Date;\r\n  onChange: (value: Date) => void;\r\n  label?: string;\r\n  disabled?: boolean;\r\n  className?: string;\r\n};\r\n\r\nconst formatDate = (date: Date): string => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, "0");\r\n  const day = String(date.getDate()).padStart(2, "0");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst parseDate = (dateString: string): Date => {\r\n  const [year, month, day] = dateString.split("-").map(Number);\r\n  return new Date(year, month - 1, day);\r\n};\r\n\r\nconst DatePicker: React.FC<DatePickerProps> = ({\r\n  value,\r\n  onChange,\r\n  label,\r\n  disabled = false,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={clsx("inline-flex flex-col space-y-2", className)}>\r\n      {label && (\r\n        <label\r\n          className={clsx(\r\n            "text-sm font-medium",\r\n            disabled ? "text-gray-500" : "text-gray-700"\r\n          )}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div\r\n        className={clsx(\r\n          "relative flex items-center px-4 py-2 rounded-lg",\r\n          "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.1),inset_-2px_-2px_5px_rgba(255,255,255,0.7)]",\r\n          disabled\r\n            ? "bg-gray-100 cursor-not-allowed border-gray-300"\r\n            : "bg-background-variant"\r\n        )}\r\n      >\r\n        <input\r\n          type="date"\r\n          value={formatDate(value)}\r\n          onChange={(e) => onChange(parseDate(e.target.value))}\r\n          disabled={disabled}\r\n          className={clsx(\r\n            "w-full bg-transparent outline-none text-gray-700",\r\n            disabled ? "text-gray-500" : "text-gray-700",\r\n            "appearance-none focus:outline-none"\r\n          )}\r\n        />\r\n        <div className="absolute inset-0 rounded-lg bg-transparent pointer-events-none" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n\nimport React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype TimePickerProps = {\r\n  value: Date;\r\n  onChange: (value: Date) => void;\r\n  label?: string;\r\n  disabled?: boolean;\r\n  className?: string;\r\n};\r\n\r\nconst formatTime = (date: Date): string => {\r\n  const hours = String(date.getHours()).padStart(2, "0");\r\n  const minutes = String(date.getMinutes()).padStart(2, "0");\r\n  return `${hours}:${minutes}`;\r\n};\r\n\r\nconst parseTime = (timeString: string, currentDate: Date): Date => {\r\n  const [hours, minutes] = timeString.split(":").map(Number);\r\n  const newDate = new Date(currentDate);\r\n  newDate.setHours(hours);\r\n  newDate.setMinutes(minutes);\r\n  return newDate;\r\n};\r\n\r\nconst TimePicker: React.FC<TimePickerProps> = ({\r\n  value,\r\n  onChange,\r\n  label,\r\n  disabled = false,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={clsx("inline-flex flex-col space-y-2", className)}>\r\n      {label && (\r\n        <label\r\n          className={clsx(\r\n            "text-sm font-medium",\r\n            disabled ? "text-gray-500" : "text-gray-700"\r\n          )}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div\r\n        className={clsx(\r\n          "relative flex items-center px-4 py-2 rounded-lg",\r\n          "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.1),inset_-2px_-2px_5px_rgba(255,255,255,0.7)]",\r\n          disabled\r\n            ? "bg-gray-100 cursor-not-allowed border-gray-300"\r\n            : "bg-background-variant"\r\n        )}\r\n      >\r\n        <input\r\n          type="time"\r\n          value={formatTime(value)}\r\n          onChange={(e) => onChange(parseTime(e.target.value, value))}\r\n          disabled={disabled}\r\n          className={clsx(\r\n            "w-full bg-transparent outline-none text-gray-700",\r\n            disabled ? "text-gray-500" : "text-gray-700",\r\n            "appearance-none focus:outline-none"\r\n          )}\r\n        />\r\n        <div className="absolute inset-0 rounded-lg bg-transparent pointer-events-none" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimePicker;\r\n',
    usage:
      '"use client";\r\nimport { useState } from "react";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport DatePicker from "@/components/DatePicker";\r\nimport TimePicker from "@/components/TimePicker";\r\n\r\nexport default function DateTimePickerDemo() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  return (\r\n    <FeatureContainer title="Date and Time Pickers" id="DateTime">\r\n      <div className="space-y-4">\r\n        <div>\r\n          <DatePicker value={date} onChange={(val) => setDate(val)} />\r\n        </div>\r\n        <div>\r\n          <TimePicker value={time} onChange={(val) => setTime(val)} />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 7,
    identifier: "Card",
    title: "Cards",
    code: '// components/Card.tsx\r\nimport React, { ReactNode } from "react";\r\nimport clsx from "clsx";\r\n\r\ntype Elevation = "none" | "outside" | "inside" | "mix";\r\ntype Variant = "default" | "air" | "lcd";\r\n\r\ntype CardProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  elevation?: Elevation;\r\n  variant?: Variant;\r\n  rounded?: boolean;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({\r\n  children,\r\n  className = "",\r\n  elevation = "none",\r\n  variant = "default",\r\n  rounded = true,\r\n}) => {\r\n  const elevationClasses = {\r\n    none: "",\r\n    outside:\r\n      "shadow-[2px_2px_8px_rgba(0,0,0,0.15),-2px_-2px_8px_rgba(255,255,255,0.7)]",\r\n    inside:\r\n      "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n    mix: "shadow-[0_4px_6px_rgba(0,0,0,0.1),0_1px_3px_rgba(0,0,0,0.1),inset_1px_1px_3px_rgba(255,255,255,0.7),inset_-1px_-1px_3px_rgba(0,0,0,0.1)]",\r\n  };\r\n\r\n  const variantClasses = {\r\n    default:\r\n      "bg-gradient-to-r from-background-card to-background-card-secondary border border-muted/20",\r\n    air: "bg-gradient-to-r from-background-card-secondary to-background-card border border-muted/20",\r\n    lcd: "bg-background-card-lcd border border-muted-dark",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "p-6",\r\n        elevationClasses[elevation],\r\n        variantClasses[variant],\r\n        rounded ? "rounded-2xl" : "",\r\n        "inline-block",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n',
    usage:
      '"use client";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport Card from "@/components/Card";\r\n\r\nexport default function CardsDemo() {\r\n  return (\r\n    <FeatureContainer title="Cards" id="Card">\r\n      <div className="gap-4 text-sm font-medium flex flex-wrap text-center">\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="default"\r\n            elevation="none"\r\n          >\r\n            Default\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="default"\r\n            elevation="inside"\r\n          >\r\n            Default (Inside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="default"\r\n            elevation="outside"\r\n          >\r\n            Default (Outside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="default"\r\n            elevation="mix"\r\n          >\r\n            Default (Mix)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="air"\r\n            elevation="none"\r\n          >\r\n            Air\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="default"\r\n            elevation="inside"\r\n          >\r\n            Air (Inside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="air"\r\n            elevation="outside"\r\n          >\r\n            Air (Outside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="air"\r\n            elevation="mix"\r\n          >\r\n            Air (Mix)\r\n          </Card>\r\n        </div>\r\n\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="lcd"\r\n            elevation="none"\r\n          >\r\n            LCD\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="lcd"\r\n            elevation="inside"\r\n          >\r\n            LCD (Inside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="lcd"\r\n            elevation="outside"\r\n          >\r\n            LCD (Outside)\r\n          </Card>\r\n        </div>\r\n        <div>\r\n          <Card\r\n            className="w-28 h-28 flex items-center justify-center"\r\n            variant="lcd"\r\n            elevation="mix"\r\n          >\r\n            LCD (Mix)\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 8,
    identifier: "Chip",
    title: "Chips",
    code: 'import React, { ReactNode } from "react";\r\nimport clsx from "clsx";\r\n\r\ntype Elevation = "none" | "outside" | "inside" | "mix";\r\n\r\ntype ChipProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  elevation?: Elevation;\r\n  rounded?: boolean;\r\n};\r\n\r\nconst Chip: React.FC<ChipProps> = ({\r\n  children,\r\n  className = "",\r\n  elevation = "none",\r\n  rounded = true,\r\n}) => {\r\n  const elevationClasses = {\r\n    none: "",\r\n    outside:\r\n      "shadow-[2px_2px_8px_rgba(0,0,0,0.15),-2px_-2px_8px_rgba(255,255,255,0.7)]",\r\n    inside:\r\n      "shadow-[inset_2px_2px_5px_rgba(0,0,0,0.15),inset_-2px_-2px_5px_rgba(255,255,255,0.6)]",\r\n    mix: "shadow-[0_4px_6px_rgba(0,0,0,0.1),0_1px_3px_rgba(0,0,0,0.1),inset_1px_1px_3px_rgba(255,255,255,0.7),inset_-1px_-1px_3px_rgba(0,0,0,0.1)]",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        "px-6 py-2",\r\n        elevationClasses[elevation],\r\n        "bg-gradient-to-r from-background-card to-background-card-secondary border border-muted/20",\r\n        rounded ? "rounded-full" : "rounded-sm",\r\n        "inline-block",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chip;\r\n',
    usage:
      'import Chip from "@/components/Chip";\r\nimport FeatureContainer from "./FeatureContainer";\r\n\r\nexport default function ChipsDemo() {\r\n  return (\r\n    <FeatureContainer title="Chips" id="Chip">\r\n      <div className="space-y-4">\r\n        <div className="gap-4 font-medium flex flex-wrap text-center text-sm text-muted">\r\n          <Chip>Default</Chip>\r\n          <Chip elevation="inside">Inside</Chip>\r\n          <Chip elevation="outside">Outside</Chip>\r\n          <Chip elevation="mix">Mix</Chip>\r\n        </div>\r\n        <div className="gap-4 font-medium flex flex-wrap text-center text-sm text-muted">\r\n          <Chip rounded={false}>Default</Chip>\r\n          <Chip rounded={false} elevation="inside">\r\n            Inside\r\n          </Chip>\r\n          <Chip rounded={false} elevation="outside">\r\n            Outside\r\n          </Chip>\r\n          <Chip rounded={false} elevation="mix">\r\n            Mix\r\n          </Chip>\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 9,
    identifier: "Icon",
    title: "Icons",
    code: '"use client";\r\nimport React from "react";\r\n\r\ntype IconProps = {\r\n  icon: React.ReactElement;\r\n  size?: number;\r\n  className?: string;\r\n  onClick?: () => void;\r\n};\r\n\r\nconst Icon: React.FC<IconProps> = ({\r\n  icon,\r\n  size = 24,\r\n  className = "",\r\n  onClick,\r\n}) => {\r\n  const IconElement = React.cloneElement(icon, {\r\n    size,\r\n    className: `inline-block ${className}`,\r\n    style: {\r\n      filter:\r\n        "drop-shadow(1px 1px 2px rgba(255, 255, 255, 0.7)) drop-shadow(-1px -1px 2px rgba(0, 0, 0, 0.2))",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className="inline-flex items-center justify-center"\r\n      style={{ width: size, height: size }}\r\n      onClick={() => onClick?.()}\r\n    >\r\n      {IconElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n',
    usage:
      'import Icon from "@/components/Icon";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport { BiBell, BiChat, BiUser } from "react-icons/bi";\r\n\r\nexport default function IconsDemo() {\r\n  return (\r\n    <FeatureContainer title="Icons" id="Icon">\r\n      <div className="space-y-4">\r\n        <div className="gap-4 font-medium flex flex-wrap text-muted">\r\n          <Icon icon={<BiBell />} size={70} />\r\n          <Icon icon={<BiUser />} size={70} />\r\n          <Icon icon={<BiChat />} size={70} />\r\n        </div>\r\n        <div className="gap-4 font-medium flex flex-wrap text-muted">\r\n          <Icon icon={<BiBell />} size={50} />\r\n          <Icon icon={<BiUser />} size={50} />\r\n          <Icon icon={<BiChat />} size={50} />\r\n        </div>\r\n        <div className="gap-4 font-medium flex flex-wrap text-muted">\r\n          <Icon icon={<BiBell />} size={30} />\r\n          <Icon icon={<BiUser />} size={30} />\r\n          <Icon icon={<BiChat />} size={30} />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 10,
    identifier: "Typography",
    title: "Typography",
    code: 'import React, { ReactNode } from "react";\r\nimport clsx from "clsx";\r\n\r\ntype TypographyProps = {\r\n  variant?: "h1" | "h2" | "h3" | "body1" | "body2" | "caption";\r\n  children: ReactNode;\r\n  className?: string;\r\n  noShadow?: boolean;\r\n};\r\n\r\nconst Typography: React.FC<TypographyProps> = ({\r\n  variant = "body1",\r\n  children,\r\n  className = "",\r\n  noShadow = false,\r\n}) => {\r\n  const baseStyles = {\r\n    h1: "text-2xl sm:text-5xl font-medium text-text",\r\n    h2: "text-xl sm:text-3xl font-medium text-text",\r\n    h3: "text-lg sm:text-2xl font-medium text-text",\r\n    body1: "text-base font-normal text-text",\r\n    body2: "text-sm font-light text-muted",\r\n    caption: "text-xs font-light text-gray-500 text-muted",\r\n  };\r\n\r\n  const shadowClass = noShadow ? "" : "text-shadow";\r\n\r\n  const Component =\r\n    variant === "h1" || variant === "h2" || variant === "h3" ? variant : "p";\r\n\r\n  return (\r\n    <Component className={clsx(baseStyles[variant], shadowClass, className)}>\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n\r\nexport default Typography;\r\n',
    usage:
      'import FeatureContainer from "./FeatureContainer";\r\nimport Typography from "@/components/Typography";\r\n\r\nexport default function TypographyDemo() {\r\n  return (\r\n    <FeatureContainer title="Typography" id="Typography">\r\n      <div className="space-y-4">\r\n        <Typography variant="h1">Heading 1</Typography>\r\n        <Typography variant="h2">Heading 2</Typography>\r\n        <Typography variant="h3">Heading 3</Typography>\r\n        <Typography variant="body1">Body 1</Typography>\r\n        <Typography variant="body2">Body 2</Typography>\r\n        <Typography variant="caption">Caption</Typography>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
  {
    id: 11,
    identifier: "Button",
    title: "Buttons",
    code: 'import React from "react";\r\nimport clsx from "clsx";\r\n\r\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  label: string;\r\n  size?: "small" | "medium" | "large";\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n  className?: string;\r\n};\r\n\r\n// Size styles\r\nconst sizeStyles = {\r\n  small: "px-4 py-2 text-sm",\r\n  medium: "px-6 py-3 text-base",\r\n  large: "px-8 py-4 text-lg",\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  label,\r\n  size = "medium",\r\n  loading = false,\r\n  disabled = false,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <button\r\n      {...rest}\r\n      disabled={disabled || loading}\r\n      className={clsx(\r\n        "rounded-md focus:outline-none transition-all duration-300",\r\n        sizeStyles[size],\r\n        "relative inline-flex justify-center items-center",\r\n        "shadow-[2px_2px_8px_rgba(0,0,0,0.1),-2px_-2px_8px_rgba(255,255,255,0.7)]", // Neumorphism shadow\r\n        disabled || loading\r\n          ? "bg-gray-300 text-gray-500 cursor-not-allowed"\r\n          : "bg-background-variant text-gray-700 hover:shadow-md",\r\n        className\r\n      )}\r\n    >\r\n      {loading ? (\r\n        <div className="w-5 h-5 border-4 border-t-transparent border-gray-400 rounded-full animate-spin"></div> // Loading spinner\r\n      ) : (\r\n        <span>{label}</span>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n',
    usage:
      '"use client";\r\nimport Button from "@/components/Button";\r\nimport FeatureContainer from "./FeatureContainer";\r\nimport { useState } from "react";\r\n\r\nexport default function ButtonDemo() {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setLoading(true);\r\n    setTimeout(() => setLoading(false), 2000); // Simulate a loading state for 2 seconds\r\n  };\r\n\r\n  return (\r\n    <FeatureContainer title="Buttons" id="Button">\r\n      <div className="space-y-4">\r\n        <div>\r\n          <Button\r\n            label="Submit"\r\n            size="medium"\r\n            loading={loading}\r\n            onClick={handleClick}\r\n            className="w-32"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button label="Cancel" size="small" className="w-24" />\r\n        </div>\r\n        <div>\r\n          <Button label="Large Button" size="large" className="w-fit" />\r\n        </div>\r\n      </div>\r\n    </FeatureContainer>\r\n  );\r\n}\r\n',
  },
];

export { SoftUIData };
